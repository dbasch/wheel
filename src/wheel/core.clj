(ns wheel.core
  (:require [crypto.password.scrypt :as password]))

;; Nobody should ever use an 8-character password, ever.
;; I would enforce a longer password, but 12 seems like a good default in 2014.
(def min-password-length 12)

(defn creds 
  "Derives a secure hash for storage using a key derivation function,
   returns a map of the form:
   {:id id
    :key \"long string of gibberish generated by the derivation function\"}"
  [id password]
  {:pre [(> (count password) min-password-length)]}
  
  {:id id
   :key (password/encrypt password)})

(defn add-user 
  "Creates new user entry.
   store-fn must know how to store an arbitrary map with :id as the key
   (e.g. put it in a sql database). The default map will contain the keys generated by the
   creds function. Optionally you can add other user attributes such as :email, :created_at, etc."
  [id password store-fn & [user-map]]
  (store-fn (merge (creds id password) user-map)))

(defn set-password 
  "Clobbers the existing password for a user.
   update-fn must be function that takes a creds map
   and knows how to update the password store."
  [id password update-fn]
  (update-fn id (:key (creds id password))))

(defn check 
  "Validates a user password. lookup-fn must be consistent with store-fn."
  [id password lookup-fn]
  (let [key (-> id lookup-fn :key)]
    (password/check password key)))

(defn change-password 
  "If the old password validates, set the new password for the user."
  [id old-pass new-pass lookup-fn update-fn]
  (when (check id old-pass lookup-fn)
    (set-password id new-pass update-fn)))